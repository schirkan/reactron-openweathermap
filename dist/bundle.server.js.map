{"version":3,"file":"bundle.server.js","sources":["../src/server/services/WeatherService.ts","../src/server/index.ts"],"sourcesContent":["import { IReactronServiceContext } from '@schirkan/reactron-interfaces';\r\nimport * as request from 'request-promise-native';\r\nimport { ILocationRequest } from 'src/common/interfaces/ILocationRequest';\r\nimport { IWeatherCondition } from 'src/common/interfaces/IWeatherCondition';\r\nimport { IWeatherForecast } from 'src/common/interfaces/IWeatherForecast';\r\nimport { IWeatherResponseForecast } from 'src/common/interfaces/IWeatherResponseForecast';\r\nimport { IWeatherService } from \"src/common/interfaces/IWeatherService\";\r\nimport { IWeatherServiceOptions } from 'src/common/interfaces/IWeatherServiceOptions';\r\nimport { IWeatherCurrent } from 'src/common/interfaces/IWeatherCurrent';\r\nimport { IWeatherResponseCurrent } from 'src/common/interfaces/IWeatherResponseCurrent';\r\n\r\nconst baseUrl = \"http://api.openweathermap.org/data/2.5/\";\r\n\r\ninterface IWeatherCacheItem {\r\n  timestamp: number;\r\n  result: Promise<any>;\r\n}\r\n\r\n// Service to access the openweathermap API\r\nexport class WeatherService implements IWeatherService {\r\n  private options: IWeatherServiceOptions;\r\n  private cache: { [url: string]: IWeatherCacheItem } = {};\r\n\r\n  constructor(private context: IReactronServiceContext) { }\r\n\r\n  public async setOptions(options: IWeatherServiceOptions): Promise<void> {\r\n    this.options = options;\r\n  }\r\n\r\n  public async getOptions(): Promise<Readonly<IWeatherServiceOptions>> {\r\n    return this.options;\r\n  }\r\n\r\n  public async getCurrentConditions(location: ILocationRequest): Promise<IWeatherCurrent> {\r\n    const url = this.getApiUrl('weather', location);\r\n    return this.getResponse(url, WeatherService.mapToCurrentConditions);\r\n  }\r\n\r\n  public async getFiveDaysForecast(location: ILocationRequest): Promise<IWeatherForecast> {\r\n    const url = this.getApiUrl('forecast', location);\r\n    return this.getResponse(url, WeatherService.mapToWeatherForecast);\r\n  }\r\n\r\n  private getApiUrl(endpoint: string, location: ILocationRequest): string {\r\n    let url = baseUrl + endpoint\r\n      + '?APPID=' + this.options.apiKey\r\n      + '&units=' + this.options.units\r\n      + '&lang=' + this.context.settings.lang;\r\n\r\n    if (location) {\r\n      if (location.cityName) {\r\n        url += '&q=' + location.cityName;\r\n      }\r\n      if (location.zip) {\r\n        url += '&zip=' + location.zip;\r\n      }\r\n      if (location.coords && (location.coords.lon !== 0 || location.coords.lat !== 0)) {\r\n        url += '&lon=' + location.coords.lon + '&lat=' + location.coords.lat;\r\n      }\r\n      if (location.cityId) {\r\n        url += '&id=' + location.cityId;\r\n      }\r\n    }\r\n    return url;\r\n  }\r\n\r\n  private async getResponse<TResponse>(url: string, mapper: (response: any) => TResponse): Promise<TResponse> {\r\n    const now = Date.now();\r\n    const validCacheTime = now - (this.options.cacheDuration * 60 * 1000);\r\n\r\n    // check timestamp\r\n    if (this.cache[url] && this.cache[url].timestamp < validCacheTime) {\r\n      delete (this.cache[url]);\r\n    }\r\n\r\n    if (!this.cache[url]) {\r\n      this.cache[url] = {\r\n        timestamp: now,\r\n        result: this.getResponseInternal(url, mapper)\r\n      };\r\n    } else {\r\n      this.context.log.debug('cache hit');\r\n    }\r\n\r\n    return this.cache[url].result;\r\n  }\r\n\r\n  private async getResponseInternal<TResponse>(url: string, mapper: (response: any) => TResponse): Promise<TResponse> {\r\n    this.context.log.debug('fetch', url);\r\n    const response = await request.get(url, { json: true, resolveWithFullResponse: true }) as request.FullResponse;\r\n    if (response.statusCode !== 200) {\r\n      this.context.log.error(response.statusMessage, response.body);\r\n      throw new Error(response.statusMessage);\r\n    }\r\n    return mapper(response.body);\r\n  }\r\n\r\n  private static mapToCurrentConditions(response: IWeatherResponseCurrent): IWeatherCurrent {\r\n    const result: IWeatherCurrent = {\r\n      location: {\r\n        coords: response.coords,\r\n        country: response.sys.country,\r\n        name: response.name,\r\n        id: response.id\r\n      },\r\n      condition: {\r\n        clouds: response.clouds.all,\r\n        humidity: response.main.humidity,\r\n        night: response.weather[0].icon.endsWith('n'),\r\n        pressure: response.main.pressure,\r\n        rain: response.rain && response.rain[\"3h\"] || 0,\r\n        snow: response.snow && response.snow[\"3h\"] || 0,\r\n        timestamp: response.dt,\r\n        temp: response.main.temp,\r\n        weatherDescription: response.weather[0].description,\r\n        weatherIcon: response.weather[0].icon,\r\n        weatherId: response.weather[0].id,\r\n        weatherText: response.weather[0].main,\r\n        windDegree: response.wind.deg,\r\n        windSpeed: response.wind.speed,\r\n        sunrise: response.sys.sunrise,\r\n        sunset: response.sys.sunset\r\n      }\r\n    };\r\n    return result;\r\n  }\r\n\r\n  private static mapToWeatherForecast(response: IWeatherResponseForecast): IWeatherForecast {\r\n    const result: IWeatherForecast = {\r\n      location: response.city,\r\n      conditions: []\r\n    };\r\n\r\n    result.conditions = response.list.map(x => ({\r\n      clouds: x.clouds.all,\r\n      humidity: x.main.humidity,\r\n      night: x.weather[0].icon.endsWith('n'),\r\n      pressure: x.main.pressure,\r\n      pressureGroundLevel: x.main.grnd_level,\r\n      pressureSeaLevel: x.main.sea_level,\r\n      rain: x.rain && x.rain[\"3h\"] || 0,\r\n      snow: x.snow && x.snow[\"3h\"] || 0,\r\n      timestamp: x.dt,\r\n      timestampText: x.dt_txt,\r\n      temp: x.main.temp,\r\n      weatherDescription: x.weather[0].description,\r\n      weatherIcon: x.weather[0].icon,\r\n      weatherId: x.weather[0].id,\r\n      weatherText: x.weather[0].main,\r\n      windDegree: x.wind.deg,\r\n      windSpeed: x.wind.speed\r\n    } as IWeatherCondition));\r\n\r\n    return result;\r\n  }\r\n}","import { IReactronServiceDefinition } from '@schirkan/reactron-interfaces';\r\nimport { WeatherService } from './services/WeatherService';\r\n\r\n// export interfaces\r\nexport * from '../common/interfaces/ILocationResponse';\r\nexport * from '../common/interfaces/ILocationRequest';\r\nexport * from '../common/interfaces/IWeatherCondition';\r\nexport * from '../common/interfaces/IWeatherCurrent';\r\nexport * from '../common/interfaces/IWeatherForecast';\r\nexport * from '../common/interfaces/IWeatherResponseForecast';\r\nexport * from '../common/interfaces/IWeatherResponseCondition';\r\nexport * from '../common/interfaces/IWeatherService';\r\nexport * from '../common/interfaces/IWeatherServiceOptions';\r\n\r\n// export reactron service definition\r\nexport const services: IReactronServiceDefinition[] = [{\r\n  description: 'Service for OpenWeatherMap',\r\n  displayName: 'Weather Service',\r\n  fields: [{\r\n    displayName: 'API Key',\r\n    description: 'API Key for OpenWeatherMap. Get yours at https://openweathermap.org/api',\r\n    name: 'apiKey',\r\n    valueType: 'string',\r\n  }, {\r\n    defaultValue: 'metric',\r\n    description: 'Units',\r\n    displayName: 'Units',\r\n    name: 'units',\r\n    valueType: 'string',\r\n    values: [\r\n      { text: 'Metric (Celsius)', value: 'metric' },\r\n      { text: 'Imperial (Fahrenheit)', value: 'imperial' },\r\n      { text: 'Kelvin', value: '' },\r\n    ]\r\n  }, {\r\n    defaultValue: 15,\r\n    description: 'Cache duration in minutes',\r\n    displayName: 'Cache duration (min)',\r\n    name: 'cacheDuration',\r\n    valueType: 'number',\r\n    minValue: 5,\r\n    maxValue: 120,\r\n    stepSize: 5\r\n  }],\r\n  name: 'WeatherService',\r\n  service: WeatherService\r\n}];"],"names":["request.get"],"mappings":"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"}