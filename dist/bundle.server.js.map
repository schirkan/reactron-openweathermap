{"version":3,"file":"bundle.server.js","sources":["../src/server/services/WeatherService.ts","../src/server/index.ts"],"sourcesContent":["import { IReactronServiceContext } from '@schirkan/reactron-interfaces';\r\nimport * as request from 'request-promise-native';\r\nimport { ILocationRequest } from 'src/common/interfaces/ILocationRequest';\r\nimport { IWeatherCondition } from 'src/common/interfaces/IWeatherCondition';\r\nimport { IWeatherForecast } from 'src/common/interfaces/IWeatherForecast';\r\nimport { IWeatherResponse } from 'src/common/interfaces/IWeatherResponse';\r\nimport { IWeatherService } from \"../../common/interfaces/IWeatherService\";\r\nimport { IWeatherServiceOptions } from '../../common/interfaces/IWeatherServiceOptions';\r\n\r\nconst baseUrl = \"http://api.openweathermap.org/data/2.5/\";\r\n\r\ninterface IWeatherCacheItem {\r\n  url: string;\r\n  timestamp: number;\r\n  result: any;\r\n}\r\n\r\n// Service to access the WUnderground API\r\nexport class WeatherService implements IWeatherService {\r\n  private options: IWeatherServiceOptions;\r\n  private cache: { [url: string]: IWeatherCacheItem } = {};\r\n\r\n  constructor(private context: IReactronServiceContext) { }\r\n\r\n  public async setOptions(options: IWeatherServiceOptions): Promise<void> {\r\n    this.options = options;\r\n  }\r\n\r\n  public getOptions(): Readonly<IWeatherServiceOptions> {\r\n    return this.options;\r\n  }\r\n\r\n  public async getCurrentConditions(location: ILocationRequest): Promise<any> {\r\n    const url = this.getApiUrl('weather', location);\r\n    return this.getResponse(url);\r\n  }\r\n\r\n  public async getFiveDaysForecast(location: ILocationRequest): Promise<IWeatherForecast> {\r\n    const url = this.getApiUrl('forecast', location);\r\n    return this.getResponse(url).then(WeatherService.ToWeatherForecast);\r\n  }\r\n\r\n  private getApiUrl(endpoint: string, location: ILocationRequest): string {\r\n    let url = baseUrl + endpoint\r\n      + '?APPID=' + this.options.apiKey\r\n      + '&units=' + this.options.units\r\n      + '&lang=' + this.context.settings.lang;\r\n\r\n    if (location) {\r\n      if (location.cityName) {\r\n        url += '&q=' + location.cityName;\r\n      }\r\n      if (location.zip) {\r\n        url += '&zip=' + location.zip;\r\n      }\r\n      if (location.coords) {\r\n        url += '&lon=' + location.coords.lon + '&lat=' + location.coords.lat;\r\n      }\r\n      if (location.cityId) {\r\n        url += '&id=' + location.cityId;\r\n      }\r\n    }\r\n    return url;\r\n  }\r\n\r\n  private async getResponse(url: string): Promise<any> {\r\n    this.context.log.debug('get', url);\r\n    const now = Date.now();\r\n    const validCacheTime = now - (this.options.cacheDuration * 60 * 1000);\r\n\r\n    // check timestamp\r\n    if (this.cache[url] && this.cache[url].timestamp < validCacheTime) {\r\n      delete (this.cache[url]);\r\n    }\r\n\r\n    if (!this.cache[url]) {\r\n      const response = await request.get(url, { json: true, resolveWithFullResponse: true }) as request.FullResponse;\r\n      if (response.statusCode !== 200) {\r\n        this.context.log.error(response.statusMessage, response.body);\r\n        throw new Error(response.statusMessage);\r\n      }\r\n      this.cache[url] = {\r\n        timestamp: now,\r\n        result: response.body,\r\n        url\r\n      };\r\n    }\r\n\r\n    return this.cache[url].result;\r\n  }\r\n\r\n  private static ToWeatherForecast(response: IWeatherResponse): IWeatherForecast {\r\n    const result: IWeatherForecast = {\r\n      city: response.city,\r\n      list: []\r\n    };\r\n\r\n    result.list = response.list.map(x => ({\r\n      clouds: x.clouds.all,\r\n      dt: x.dt,\r\n      dt_txt: x.dt_txt,\r\n      grnd_level: x.main.grnd_level,\r\n      humidity: x.main.humidity,\r\n      pressure: x.main.pressure,\r\n      sea_level: x.main.sea_level,\r\n      temp: x.main.temp,\r\n      rain: x.rain && x.rain[\"3h\"] || 0,\r\n      snow: x.snow && x.snow[\"3h\"] || 0,\r\n      weather_description: x.weather[0].description,\r\n      weather_icon: x.weather[0].icon,\r\n      weather_id: x.weather[0].id,\r\n      weather_txt: x.weather[0].main,\r\n      wind_deg: x.wind.deg,\r\n      wind_speed: x.wind.speed\r\n    } as IWeatherCondition));\r\n\r\n    return result;\r\n  }\r\n}","import { IReactronServiceDefinition } from '@schirkan/reactron-interfaces';\r\nimport { WeatherService } from './services/WeatherService';\r\n\r\n// export interfaces\r\nexport * from '../common/interfaces/ILocationResponse';\r\nexport * from '../common/interfaces/ILocationRequest';\r\nexport * from '../common/interfaces/IWeatherCondition';\r\nexport * from '../common/interfaces/IWeatherForecast';\r\nexport * from '../common/interfaces/IWeatherResponse';\r\nexport * from '../common/interfaces/IWeatherResponseCondition';\r\nexport * from '../common/interfaces/IWeatherService';\r\nexport * from '../common/interfaces/IWeatherServiceOptions';\r\n\r\n// export reactron service definition\r\nexport const services: IReactronServiceDefinition[] = [{\r\n  description: 'Service for OpenWeatherMap',\r\n  displayName: 'Weather Service',\r\n  fields: [{\r\n    displayName: 'API Key',\r\n    description: 'API Key for OpenWeatherMap. Get yours at https://openweathermap.org/api',\r\n    name: 'apiKey',\r\n    valueType: 'string',\r\n  }, {\r\n    defaultValue: 'metric',\r\n    description: 'Units',\r\n    displayName: 'Units',\r\n    name: 'units',\r\n    valueType: 'string',\r\n    values: [\r\n      { text: 'Metric (Celsius)', value: 'metric' },\r\n      { text: 'Imperial (Fahrenheit)', value: 'imperial' },\r\n      { text: 'Kelvin', value: '' },\r\n    ]\r\n  }, {\r\n    defaultValue: 15,\r\n    description: 'Cache duration in minutes',\r\n    displayName: 'Cache duration (min)',\r\n    name: 'cacheDuration',\r\n    valueType: 'number',\r\n    minValue: 0,\r\n    maxValue: 120,\r\n    stepSize: 5\r\n  }],\r\n  name: 'WeatherService',\r\n  service: WeatherService\r\n}];"],"names":["request.get"],"mappings":"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"}